
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Symbol 1
#define LAYER_Navigation 2
#define LAYER_Number 3
#define LAYER_NumberAlternative 4
#define LAYER_Magic 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
    //
    // Glove80 key positions index for positional hold-tap
    // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
#define LEFT_HAND_KEYS \
          0  1  2  3  4    \
         10 11 12 13 14 15 \
         22 23 24 25 26 27 \
         34 35 36 37 38 39  \
         46 47 48 49 50 51  \
         64 65 66 67 68
#define RIGHT_HAND_KEYS \
              5  6  7  8  9 \
          16 17 18 19 20 21 \
          28 29 30 31 32 33 \
          40 41 42 43 44 45 \
          58 59 60 61 62 63 \
             75 76 77 78 79
#define THUMB_KEYS      \
          69 52       57 74 \
           70 53     56 73  \
            71 54   55 72

combos {
        compatible = "zmk,combos";
        global-quick-tap-ms = <75>;
        combo_ao {
            timeout-ms = <50>;
            key-positions = <35 31>;
            bindings = <&ao>;
        };
        combo_ae {
            timeout-ms = <50>;
            key-positions = <35 25>;
            bindings = <&ae>;
        };
        combo_oe {
            timeout-ms = <50>;
            key-positions = <31 25>;
            bindings = <&oe>;
        };

        combo_lparen {
            timeout-ms = <50>;
            key-positions = <37 38>;
            bindings = <&kp LS(N9)>;
        };
        combo_rparen {
            timeout-ms = <50>;
            key-positions = <41 42>;
            bindings = <&kp LS(N0)>;
        };

        combo_lcurly {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LS(LBKT)>;
        };
        combo_rcurly {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp LS(RBKT)>;
        };

        combo_lbracket {
            timeout-ms = <50>;
            key-positions = <49 50>;
            bindings = <&kp LBKT>;
        };
        combo_rbracket {
            timeout-ms = <50>;
            key-positions = <59 60>;
            bindings = <&kp RBKT>;
        };
};

behaviors {
    ao: ao {
        compatible = "zmk,behavior-macro";
        label = "ao";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp RALT>
            , <&macro_tap &kp A>
            , <&macro_release &kp RALT>
            , <&macro_tap &kp A>;
    }; 
    ae: ae {
        compatible = "zmk,behavior-macro";
        label = "ae";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp RALT>
            , <&macro_tap &kp A>
            , <&macro_release &kp RALT>
            , <&macro_press &kp LSHIFT>
            , <&macro_tap &kp SQT>
            , <&macro_release &kp LSHIFT>;
    };
    oe: oe {
        compatible = "zmk,behavior-macro";
        label = "oe";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp RALT>
            , <&macro_tap &kp O>
            , <&macro_release &kp RALT>
            , <&macro_press &kp LSHIFT>
            , <&macro_tap &kp SQT>
            , <&macro_release &kp LSHIFT>;
    };

    lt {
        flavor = "hold-preferred";
    };
    skq: sticky_key_quick {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <2000>;
        quick-release;
        ignore-modifiers;
    };
    lsd: left_shift_dance {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&skq LSHIFT>, <&caps_word>;
    };
    rpi: require_prior_idle {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <100>;
        bindings = <&kp>, <&kp>;
    };
    rpil: require_prior_idle_layer {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <100>;
        bindings = <&mo>, <&kp>;
    };
    lhrm: homerow_mod_left {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <50>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    rhrm: homerow_mod_right {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <50>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
};

};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {
    
    };
};

/* Automatically generated combos definitions */
/ {
    combos {
    compatible = "zmk,combos";
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1        &kp F2        &kp F3         &kp F4          &kp F5                                                                                               &kp F6         &kp F7        &kp F8                &kp F9    &kp F10
        &kp LG(SPACE)        &kp N1        &kp N2         &kp N3          &kp N4  &kp N5                                                                       &kp N6          &kp N7         &kp N8        &kp N9                &kp N0  &kp MINUS
              &kp TAB         &kp Q         &kp W          &kp E           &kp R   &kp T                                                                        &kp Y           &kp U          &kp I         &kp O                 &kp P   &kp LBKT
              &kp ESC  &lhrm LGUI A  &lhrm LALT S  &lhrm LCTRL D  &lhrm LSHIFT F   &kp G                                                                        &kp H  &rhrm RSHIFT J  &rhrm RCTRL K  &rhrm LALT L  &rhrm RGUI BACKSPACE    &kp DEL
            &kp GRAVE         &kp Z         &kp X          &kp C           &kp V   &kp B   &mo 2   &none  &sk RALT  &sk RALT  &rpi LGUI DELETE        &kp RET   &kp N           &kp M      &kp COMMA       &kp DOT               &kp RET      &none
 &magic LAYER_Magic 0      &kp LEFT     &kp RIGHT       &kp LBKT        &kp RBKT            &lsd   &mo 2     &none     &none       &rpil 3 TAB  &rpil 1 SPACE              &kp LS(N9)     &kp LS(N0)      &kp DOWN                &kp UP      &none
            >;
        };

        layer_Symbol {
            bindings = <
  &kp C_BRI_DN   &kp C_BRI_UP     &kp C_PREV     &kp C_NEXT      &kp C_PP                                                                                          &none      &none     &none     &none   &none
 &kp LS(EQUAL)     &kp LS(N1)     &kp LS(N9)     &kp LS(N0)      &kp SEMI     &kp COMMA                                                                 &none      &none      &none     &none     &none   &none
     &kp GRAVE   &kp LS(LBKT)        &kp SQT    &kp LS(SQT)  &kp RS(RBKT)  &kp LS(FSLH)                                                                 &none  &kp LSHFT  &kp RCTRL  &kp LALT  &kp RGUI   &none
    &kp LS(N3)     &kp LS(N6)      &kp EQUAL  &kp LS(MINUS)    &kp LS(N4)    &kp LS(N8)                                                                 &none  &kp SPACE    &kp TAB     &none  &kp BSPC   &none
 &kp LS(GRAVE)  &kp LS(COMMA)  &kp LS(EQUAL)      &kp MINUS   &kp LS(DOT)      &kp FSLH      &kp BSLH     &kp DOT  &kp LS(N8)  &trans  &trans  &trans   &none      &none      &none     &none   &kp RET   &none
    &kp LS(N2)     &kp LS(N7)   &kp LS(BSLH)  &kp LS(GRAVE)     &kp GRAVE                &kp LS(SEMI)  &kp LS(N5)    &kp SEMI  &trans  &trans  &trans              &none      &none     &none     &none   &none
            >;
        };

        layer_Navigation {
            bindings = <
 &trans     &trans     &trans      &trans       &trans                                                                              &trans      &trans     &trans      &trans  &trans
 &trans     &trans     &trans      &trans       &trans     &trans                                                      &trans       &trans      &trans     &trans      &trans  &trans
 &trans     &trans     &trans      &trans       &trans     &trans                                                  &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO  &trans
 &trans  &skq LGUI  &skq LALT  &skq LCTRL  &skq LSHIFT  &kp PSCRN                                                    &kp LEFT     &kp DOWN      &kp UP  &kp RIGHT    &kp BSPC  &trans
 &trans     &trans     &trans      &trans       &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp HOME    &kp PG_DN   &kp PG_UP    &kp END     &kp RET  &trans
 &trans     &trans     &trans      &trans       &trans             &trans  &trans  &trans  &trans  &trans  &trans                   &trans      &trans     &trans      &trans  &trans
            >;
        };

        layer_Number {
            bindings = <
  &none   &none   &none   &none   &none                                                                        &none       &none      &none                 &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none        &none       &none      &none                 &none   &none
  &none   &none  &kp N7  &kp N8  &kp N9   &none                                                   &none        &none       &none      &none                 &none   &none
  &none   &none  &kp N4  &kp N5  &kp N6   &none                                                   &none  &skq LSHIFT  &skq LCTRL  &skq LALT  &rhrm RGUI BACKSPACE   &none
  &none   &none  &kp N1  &kp N2  &kp N3   &none   &none   &none   &none   &none   &none   &none   &none        &none       &none      &none               &kp RET   &none
  &none   &none   &none   &none   &none          &kp N0   &none   &none   &none   &none   &none                &none       &none      &none                 &none   &none
            >;
        };

        layer_NumberAlternative {
            bindings = <
  &kp C_BRI_DN   &kp C_BRI_UP     &kp C_PREV     &kp C_NEXT      &kp C_PP                                                                                       &none   &none   &none     &none   &none
 &kp LS(EQUAL)     &kp LS(N1)     &kp LS(N9)     &kp LS(N0)      &kp SEMI     &kp COMMA                                                                 &none   &none   &none   &none     &none   &none
     &kp GRAVE   &kp LS(LBKT)        &kp SQT    &kp LS(SQT)  &kp LS(RBKT)  &kp LS(FSLH)                                                                 &none  &kp N7  &kp N8  &kp N9     &none   &none
    &kp LS(N3)     &kp LS(N6)      &kp EQUAL  &kp LS(MINUS)    &kp LS(N4)    &kp LS(N8)                                                                 &none  &kp N4  &kp N5  &kp N6  &kp BSPC   &none
 &kp LS(GRAVE)  &kp LS(COMMA)  &kp LS(EQUAL)      &kp MINUS   &kp LS(DOT)      &kp FSLH      &kp BSLH     &kp DOT  &kp LS(N8)  &trans  &trans  &trans   &none  &kp N1  &kp N2  &kp N3   &kp RET   &none
    &kp LS(N2)     &kp LS(N7)   &kp LS(BSLH)       &kp LBKT      &kp RBKT                &kp LS(SEMI)  &kp LS(N5)    &kp SEMI  &trans  &trans  &kp N0           &none   &none   &none     &none   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none        &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none                 &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none                 &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none           &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none            &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none  &magic LAYER_Magic 0
            >;
        };

    };
};
